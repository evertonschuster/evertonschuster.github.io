{"version":3,"sources":["pages/Cidades/Cidade/FormCidade/CidadeSchema.ts","pages/Cidades/Cidade/FormCidade/FormCidade.tsx","layouts/FormBasicLayout/FormBasicLayout.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","components/ModalForm/ModalFormContext.ts","hoc/WithFormItem.tsx","hoc/useDebouncedCallback.ts","components/WithFormItem/withFormItem.tsx","layouts/CrudFormLayout/components/FormikForm.tsx","layouts/CrudFormLayout/CrudFormLayout.tsx","components/SelectModel/SelectModelOne.tsx","services/RouterService/RouterServiceModel.tsx","components/ModalForm/ModalForm.tsx","apis/Cidades/CidadeApi.ts","apis/Cidades/EstadoApi.ts"],"names":["CidadeSchema","Yup","shape","nome","max","required","ddd","estadoId","nullable","typeError","FormCidade","props","useState","undefined","cidade","setCidade","loading","setLoading","values","formikHelpers","a","match","params","id","CidadeApi","Update","Save","history","push","errorBack","GetById","bdCidade","data","useEffect","getCidade","CrudFormLayout","isLoading","backPath","breadcrumbList","displayName","URL","initialValues","validationSchema","onSubmit","span","name","label","placeholder","readOnly","fetchMethod","EstadoApi","bind","keyDescription","title","errorMessage","noSelection","path","memo","setBreadcrumb","useContext","BasicLayoutContext","className","children","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ModalFormContext","React","createContext","state","setState","ModalFormContextProvider","Provider","Consumer","withFormItem","Field","propsConf","basicLayoutContext","isViewMode","formMode","FormMode","View","isDisabled","disabled","autoComplete","style","width","withFormItemCustom","useField","field","WithItemNone","showLabel","padding","ItemFormRender","useDebouncedCallback","callback","wait","argsRef","useRef","timeout","cleanup","current","clearTimeout","args","setTimeout","Input","formikAntd","fast","InputNumber","decimalSeparator","TextArea","MaskedInput","Select","DatePicker","Switch","FormikForm","forwardRef","ref","useHistory","formik","useFormikContext","keyLocalStorage","location","pathname","toLowerCase","localStorage","getItem","Modal","confirm","content","onOk","getFormLocalStorage","onCancel","removeSavedFormLocalStorageForm","cancelText","okText","verefiSavedForm","useImperativeHandle","saveFormLocalStorage","ceatedDate","Date","formData","setItem","JSON","stringify","removeItem","savedForm","parse","setValues","onKeyUp","event","onKeyDown","isSubmitting","zIndex","height","margin","left","top","position","background","type","fontSize","color","theme","isFunction","justify","paddingTop","display","flexDirection","paddingRight","textAlign","dataCriacao","toLocaleString","day","month","year","hour","minute","dataAtualizacao","renderDatas","marginRight","onClick","submitForm","withRouter","childRef","FormBasicLayout","enableReinitialize","keyEvent","charCode","keyCode","preventDefault","visible","setVisible","description","setDescription","keyId","meta","helpers","objectName","helpersObject","setSubmitting","showDescription","getDesciptionValues","respose","setValue","handleClick","Item","validateStatus","error","touched","help","col","inputId","min","onChange","setTouched","onBlur","btnSearch","icon","inputDescription","SelectOne","isNaN","Number","breadcrumb","sharedState","setSharedState","setFormMode","basename","RoutePath","to","CloseForm","concat","destroyOnClose","Array","isArray","length","message","SelectMultiple","ApiBase"],"mappings":"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","file":"static/js/11.aaa15672.chunk.js","sourcesContent":["import * as Yup from 'yup';\r\nimport { Cidade } from '../../../../models/Cidades/Cidade';\r\n\r\n\r\nexport const CidadeSchema = Yup.object().shape<Cidade>({\r\n    nome: Yup.string()\r\n        .max(50, \"O campo [Nome] não deve possuir mais de 50 caracteres.\")\r\n        .required('[Nome] da Cidade não pode ser vaziu.'),\r\n\r\n    ddd: Yup.string()\r\n        .max(5, \"O campo [DDD] não deve possuir mais de 5 caracteres.\")\r\n        .required('[DDD] do Cidade não pode ser vaziu.'),\r\n\r\n    estadoId: Yup.number()\r\n        .nullable()\r\n        .typeError(\"Id inválido\")\r\n        .required('O campo Estado é obrigatório'),\r\n});","import React, { useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Row, Col } from 'antd';\r\nimport SelectModel from '../../../../components/SelectModel/SelectModelOne';\r\nimport { Input } from '../../../../components/WithFormItem/withFormItem';\r\nimport CrudFormLayout from '../../../../layouts/CrudFormLayout/CrudFormLayout';\r\nimport { Cidade } from '../../../../models/Cidades/Cidade';\r\nimport { CidadeSchema } from './CidadeSchema';\r\nimport { FormikHelpers } from 'formik';\r\nimport { errorBack } from '../../../../utils/MessageApi';\r\nimport { EstadoApi } from '../../../../apis/Cidades/EstadoApi';\r\nimport { CidadeApi } from '../../../../apis/Cidades/CidadeApi';\r\n\r\nconst FormCidade: React.FC<RouteComponentProps & RouteComponentProps<any>> = (props) => {\r\n\r\n\r\n    const [cidade, setCidade] = useState<Cidade>({ nome: \"\", ddd: \"\", estadoId: undefined })\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        getCidade(props.match.params.id);\r\n    }, [props.match.params.id])\r\n\r\n\r\n    async function onSubmit(values: Cidade, formikHelpers: FormikHelpers<Cidade>) {\r\n\r\n        try {\r\n\r\n            if (props.match.params.id) {\r\n                await CidadeApi.Update(values);\r\n            } else {\r\n                await CidadeApi.Save(values);\r\n            }\r\n\r\n            props.history.push(\"/Cidade\")\r\n        } catch (e) {\r\n            errorBack(formikHelpers, e, [\"nome\"]);\r\n        }\r\n    }\r\n\r\n    async function getCidade(id: number) {\r\n        try {\r\n            if (!id) {\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n            let bdCidade = await CidadeApi.GetById(id);\r\n            setCidade(bdCidade.data);\r\n        } catch (e) {\r\n            errorBack(null, e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CrudFormLayout\r\n            isLoading={loading}\r\n            backPath=\"/cidade\"\r\n            breadcrumbList={[{ displayName: \"Cidade\", URL: \"/Cidade\" }, { displayName: \"Novo Cidade\", URL: undefined }]}\r\n            initialValues={cidade}\r\n            validationSchema={CidadeSchema}\r\n            onSubmit={onSubmit}\r\n        >\r\n\r\n            <Row>\r\n                <Col span={3}>\r\n                    <Input name=\"id\" label=\"Código\" placeholder=\"Codigo\" readOnly />\r\n                </Col>\r\n                <Col span={10}>\r\n                    <Input name=\"nome\" label=\"Cidade\" placeholder=\"Cidade\" required />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Input name=\"ddd\" label=\"DDD\" placeholder=\"DDD\" required />\r\n                </Col>\r\n                <Col span={8}>\r\n                    <SelectModel\r\n                        fetchMethod={EstadoApi.GetById.bind(EstadoApi)}\r\n                        name=\"estadoId\"\r\n                        keyDescription=\"nome\"\r\n                        required={true}\r\n                        label={{ title: \"Seleção de Estado\", label: \"Estado\" }}\r\n                        errorMessage={{ noSelection: \"Selecione ao menos um Estado!\" }}\r\n                        path=\"estado\" />\r\n                </Col>\r\n            </Row>\r\n\r\n        </CrudFormLayout>\r\n    );\r\n\r\n}\r\n\r\nexport default FormCidade;\r\n","import React, { useContext, useEffect, memo, ReactNode } from 'react';\r\nimport { BreadcrumbProp } from '../BasicLayout/BasicLayout';\r\nimport BasicLayoutContext from '../BasicLayout/BasicLayoutContext';\r\nimport \"./form-basic-layout.style.css\";\r\n\r\nexport interface Props {\r\n    breadcrumbList?: BreadcrumbProp[],\r\n    children?: ReactNode\r\n}\r\n\r\nconst FormBasicLayout: React.FC<Props> = (props) => {\r\n\r\n    const { setBreadcrumb } = useContext(BasicLayoutContext);\r\n\r\n    useEffect(() => {\r\n\r\n        setBreadcrumb(props.breadcrumbList);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"form-application-container\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default memo<Props>(FormBasicLayout);\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import React from 'react'\r\n\r\nexport interface ModalFormContextProp<T> {\r\n    state?: T | T[];\r\n    setState: (value?: T | T[]) => void;\r\n}\r\n\r\nconst ModalFormContext = React.createContext<ModalFormContextProp<any>>(\r\n    {\r\n        state: undefined,\r\n        setState: () => { },\r\n    }\r\n);\r\n\r\nexport const ModalFormContextProvider = ModalFormContext.Provider\r\nexport const ModalFormContextConsumer = ModalFormContext.Consumer\r\n\r\nexport default ModalFormContext\r\n\r\n// headerVisible\r\n// setHeaderVisible","import React, { useContext } from 'react'\r\nimport { FormItem } from 'formik-antd';\r\nimport BasicLayoutContext, { FormMode } from '../layouts/BasicLayout/BasicLayoutContext';\r\nimport { useField } from 'formik';\r\n\r\ninterface WithFormITemProps {\r\n    label: string;\r\n    required?: boolean;\r\n}\r\n\r\ninterface PropsItemForm {\r\n    showLabel?: boolean;\r\n    label?: string;\r\n    required?: boolean;\r\n    padding?: boolean;\r\n}\r\n\r\nexport const withFormItem = <P extends object>(Field: React.ComponentType<P>, propsConf?: any): React.FC<P & WithFormITemProps> => (props: any) => {\r\n\r\n    const basicLayoutContext = useContext(BasicLayoutContext);\r\n\r\n    const isViewMode = basicLayoutContext != null && basicLayoutContext.formMode === FormMode.View;\r\n    const isDisabled = props.disabled || isViewMode;\r\n\r\n    return (\r\n        <FormItem name={props.name} label={props.label || \"\"} required={props.required} className=\"form-custom-item\" >\r\n            <Field autoComplete=\"off\" disabled={isDisabled} {...propsConf} {...props} required={false} style={{ width: \"100%\" }} />\r\n        </FormItem >\r\n    )\r\n}\r\n\r\nexport const withFormItemCustom = <P extends object>(Field: React.ComponentType<P>, propsConf?: any): React.FC<P & WithFormITemProps> => (props: any) => {\r\n\r\n    const basicLayoutContext = useContext(BasicLayoutContext);\r\n    const [field, meta, helpers] = useField({ name: props.name });\r\n\r\n    const isViewMode = basicLayoutContext != null && basicLayoutContext.formMode === FormMode.View;\r\n    const isDisabled = props.disabled || isViewMode;\r\n\r\n    return (\r\n        <FormItem name={props.name} label={props.label || \"\"} required={props.required} className=\"form-custom-item\" >\r\n            <Field\r\n                autoComplete=\"off\"\r\n                disabled={isDisabled}\r\n                {...field}\r\n                {...propsConf}\r\n                {...props}\r\n                required={false}\r\n                style={{ width: \"100%\" }} />\r\n        </FormItem >\r\n    )\r\n}\r\n\r\nexport const WithItemNone: React.FC<PropsItemForm> = (props) => {\r\n    const showLabel = props.showLabel ?? true;\r\n\r\n    return (\r\n        <div className={`ant-row ant-form-item ant-form-item-with-help ${props.padding === true || props.padding === undefined ? \"form-custom-item\" : \"\"}`}>\r\n            {showLabel ? <div className=\"ant-col ant-form-item-label\">\r\n                <span>&nbsp;</span >\r\n            </div > : \"\"\r\n            }\r\n\r\n            <div className=\"ant-col ant-form-item-control-wrapper\">\r\n                <div className=\"ant-form-item-control \">\r\n                    <span className=\"ant-form-item-children\">\r\n\r\n                        {props.children}\r\n\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport const ItemFormRender: React.FC<PropsItemForm> = (props) => {\r\n    const showLabel = props.showLabel ?? true;\r\n\r\n    return (\r\n        <div className=\"ant-row ant-form-item ant-form-item-with-help form-custom-item\">\r\n            {showLabel ?\r\n                <div className=\"ant-col ant-form-item-label\">\r\n                    <label className={props.required ? \"ant-form-item-required\" : \"\"}>{props.label ?? <>&nbsp;</>}</label>\r\n                </div>\r\n                : \"\"\r\n            }\r\n\r\n            <div className=\"ant-col ant-form-item-control-wrapper\">\r\n                <div className=\"ant-form-item-control \">\r\n                    <span className=\"ant-form-item-children\">\r\n\r\n                        {props.children}\r\n\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useRef, useEffect } from \"react\";\r\n\r\nexport function useDebouncedCallback<A extends any[]>(callback: (...args: A) => void, wait: number) {\r\n    // track args & timeout handle between calls\r\n    const argsRef = useRef<A>();\r\n    const timeout = useRef<ReturnType<typeof setTimeout>>();\r\n\r\n    function cleanup() {\r\n        if (timeout.current) {\r\n            clearTimeout(timeout.current);\r\n        }\r\n    }\r\n\r\n    // make sure our timeout gets cleared if\r\n    // our consuming component gets unmounted\r\n    useEffect(() => cleanup, []);\r\n\r\n    return function debouncedCallback(...args: A) \r\n    {\r\n        // capture latest args\r\n        argsRef.current = args;\r\n\r\n        // clear debounce timer\r\n        cleanup();\r\n\r\n        // start waiting again\r\n        timeout.current = setTimeout(() => {\r\n            if (argsRef.current) {\r\n                callback(...argsRef.current);\r\n            }\r\n        }, wait);\r\n    };\r\n}\r\n","import * as formikAntd from \"formik-antd\"\r\nimport { withFormItem, withFormItemCustom } from \"../../hoc/WithFormItem\"\r\nimport MaskedInput from 'react-text-mask'\r\n\r\nexport const Input = withFormItem(formikAntd.Input, { fast: true });\r\nexport const InputNumber = withFormItem(formikAntd.InputNumber, { decimalSeparator: \",\", fast: true });\r\nexport const InputMasked = withFormItemCustom(MaskedInput, { fast: true });\r\nexport const TextArea = withFormItem(formikAntd.Input.TextArea, { fast: true });\r\n\r\nexport const Select = withFormItem(formikAntd.Select, { fast: true })\r\n\r\nexport const DatePicker = withFormItem(formikAntd.DatePicker, { fast: true });\r\n\r\nexport const Switch = withFormItem(formikAntd.Switch, { fast: true });","import React, { forwardRef, useImperativeHandle, useEffect } from 'react'\r\nimport { FormikProps, isFunction, useFormikContext } from 'formik'\r\nimport { Icon, Form, Row, Col, Button, Modal } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDebouncedCallback } from '../../../hoc/useDebouncedCallback';\r\n\r\nexport interface Props {\r\n    isLoading?: boolean;\r\n    backPath: string;\r\n    children?: ((props: FormikProps<any>) => React.ReactNode) | React.ReactNode;\r\n    onKeyDown: (event: React.KeyboardEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport interface FormikFormRef {\r\n    removeSavedFormLocalStorageForm: () => void;\r\n}\r\n\r\ninterface FormData {\r\n    ceatedDate: Date;\r\n    formData: any,\r\n}\r\n\r\nconst FormikForm: React.FC<Props & any> = forwardRef<FormikFormRef, Props>((props, ref) => {\r\n    const history = useHistory();\r\n    const formik = useFormikContext();\r\n    const keyLocalStorage = `form-chache${history.location.pathname.toLowerCase()}`;\r\n\r\n\r\n    useEffect(() => {\r\n        verefiSavedForm();\r\n    }, []);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        removeSavedFormLocalStorageForm\r\n    }));\r\n\r\n    const saveFormLocalStorage = useDebouncedCallback(() => {\r\n        var values: FormData = {\r\n            ceatedDate: new Date(),\r\n            formData: formik.values,\r\n        };\r\n\r\n        localStorage.setItem(keyLocalStorage, JSON.stringify(values))\r\n    }, 600);\r\n\r\n    function removeSavedFormLocalStorageForm() {\r\n        localStorage.removeItem(keyLocalStorage);\r\n    }\r\n\r\n    function getFormLocalStorage() {\r\n        var savedForm = JSON.parse(localStorage.getItem(keyLocalStorage) ?? \"\") as FormData;\r\n        formik.setValues(savedForm.formData);\r\n    }\r\n\r\n    function verefiSavedForm() {\r\n        if (!localStorage.getItem(keyLocalStorage)) {\r\n            return;\r\n        }\r\n\r\n        Modal.confirm({\r\n            title: \"Recuperação de formulário\",\r\n            content: \"Existem dados não salvos, deseja recuperar?\",\r\n            onOk: getFormLocalStorage,\r\n            onCancel: removeSavedFormLocalStorageForm,\r\n            cancelText: \"Remover\",\r\n            okText: \"Recuperar\"\r\n        })\r\n    }\r\n\r\n    function onKeyDown(event: React.KeyboardEvent<HTMLFormElement>) {\r\n        saveFormLocalStorage();\r\n        props.onKeyDown(event);\r\n    }\r\n\r\n    function renderLoading(isLoading: boolean) {\r\n\r\n        if (!isLoading && !props.isLoading) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div style={{\r\n                zIndex: 100,\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                margin: \"0em\",\r\n                left: \"0em\",\r\n                top: \"0em\",\r\n                position: \"fixed\"\r\n            }} >\r\n                <div style={{ background: \"#00000026\", height: \"100%\" }}>\r\n                    <Icon type=\"loading\" style={{ position: \"absolute\", top: \"50%\", left: \"50%\", fontSize: '72px', color: '#08c' }} theme=\"outlined\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDatas(formik: FormikProps<any>) {\r\n        return (\r\n            <>\r\n                <span style={{ textAlign: \"end\" }} >\r\n                    Data Criação: {formik.values?.dataCriacao ? new Date(formik.values?.dataCriacao).toLocaleString(undefined, {\r\n                    day: \"numeric\",\r\n                    month: \"numeric\",\r\n                    year: \"numeric\",\r\n\r\n                    hour: \"numeric\",\r\n                    minute: \"numeric\"\r\n                }) : \"  /  /\"}</span>\r\n                <span style={{ textAlign: \"end\" }} >\r\n                    Data Atualização: {formik.values?.dataAtualizacao ? new Date(formik.values.dataAtualizacao)?.toLocaleString(undefined, {\r\n                    day: \"numeric\",\r\n                    month: \"numeric\",\r\n                    year: \"numeric\",\r\n\r\n                    hour: \"numeric\",\r\n                    minute: \"numeric\"\r\n                }) : \"  /  /\"}</span>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form onKeyUp={onKeyDown} >\r\n            {renderLoading(formik.isSubmitting)}\r\n\r\n            {isFunction(props.children)\r\n                ? props.children(formik)\r\n                : props.children}\r\n\r\n            < Row type=\"flex\" justify=\"end\" style={{ paddingTop: \"25px\" }}>\r\n                <Col span={7}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        paddingRight: 20\r\n                    }}>\r\n                    {renderDatas(formik)}\r\n                </Col>\r\n                <Col>\r\n                    <Button type=\"danger\" style={{ marginRight: \"10px\" }} onClick={() => history.push(props.backPath)}>Cancelar</Button>\r\n                    <Button type=\"primary\" onClick={() => formik.submitForm()}>Salvar</Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n})\r\n\r\nexport default FormikForm\r\n","import React, { useRef } from 'react';\r\nimport { Formik, FormikConfig, FormikHelpers, FormikProps, FormikContextType } from 'formik';\r\nimport FormBasicLayout from '../FormBasicLayout/FormBasicLayout';\r\nimport { BreadcrumbProp } from '../BasicLayout/BasicLayout';\r\nimport { errorBack } from '../../utils/MessageApi';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport FormikForm, { FormikFormRef } from './components/FormikForm';\r\n\r\nexport interface Props extends FormikConfig<any> {\r\n    breadcrumbList?: BreadcrumbProp[];\r\n    isLoading?: boolean;\r\n    backPath: string;\r\n    children?: ((props: FormikProps<any>) => React.ReactNode) | React.ReactNode;\r\n}\r\n\r\n\r\nconst CrudFormBasicLayout: React.FC<Props & RouteComponentProps> = (props) => {\r\n\r\n    const childRef = useRef<FormikFormRef>();\r\n\r\n    \r\n    async function onSubmit(values: any, formikHelpers: FormikHelpers<any>) {\r\n        try {\r\n            childRef.current?.removeSavedFormLocalStorageForm();\r\n            await props.onSubmit(values, formikHelpers);\r\n        } catch (e) {\r\n            errorBack(formikHelpers, e)\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function onKeyDown(keyEvent: React.KeyboardEvent<HTMLFormElement>) {\r\n        if ((keyEvent.charCode || keyEvent.keyCode) === 13) {\r\n            keyEvent.preventDefault();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormBasicLayout breadcrumbList={props.breadcrumbList} >\r\n            <Formik\r\n                {...props}\r\n                onSubmit={onSubmit}\r\n                enableReinitialize={true}  >\r\n                <FormikForm\r\n                    ref={childRef}\r\n                    backPath={props.backPath}\r\n                    isLoading={props.isLoading}\r\n                    children={props.children}\r\n                    onKeyDown={onKeyDown}\r\n                />\r\n            </Formik>\r\n        </FormBasicLayout >\r\n    );\r\n\r\n}\r\n\r\nexport default withRouter(CrudFormBasicLayout);\r\n","import React, { useState, useEffect, memo } from 'react';\r\nimport { Row, Col, Button, Form } from 'antd';\r\nimport { Input as InputAntd, InputNumber } from \"antd\"\r\nimport { ItemFormRender, WithItemNone } from '../../hoc/WithFormItem';\r\nimport ModelForm, { ErrorMessage, Label } from '../ModalForm/ModalForm';\r\nimport { useField, useFormikContext } from 'formik';\r\nimport { useDebouncedCallback } from '../../hoc/useDebouncedCallback';\r\nimport { AxiosResponse } from 'axios';\r\nimport \"./select-model-one-style.css\";\r\nimport { FormMode } from '../../layouts/BasicLayout/BasicLayoutContext';\r\n\r\nexport interface ICol {\r\n    inputId?: number,\r\n    btnSearch?: number,\r\n    inputDescription?: number,\r\n}\r\n\r\nexport interface Props {\r\n    path: string;\r\n    errorMessage: ErrorMessage;\r\n    label: Label;\r\n    name: string;\r\n    keyId?: string;\r\n    keyDescription: string;\r\n    required?: boolean;\r\n    fetchMethod: (id: number) => Promise<AxiosResponse<any>>;\r\n    showLabel?: boolean;\r\n    showDescription?: boolean;\r\n    objectName?: string;\r\n    col?: ICol\r\n}\r\n\r\n\r\nconst SelectModelOne: React.FC<Props> = (props) => {\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [description, setDescription] = useState(\"\")\r\n    const keyId = props.keyId || \"id\";\r\n    const keyDescription = props.keyDescription || \"nome\";\r\n    const required = props.required || true;\r\n    const showLabel = props.showLabel ?? true;\r\n    const [field, meta, helpers] = useField(props.name);\r\n    const [, , helpersObject] = useField(props.objectName ?? props.name); //Todo\r\n    const { setSubmitting } = useFormikContext();\r\n    const showDescription = props.showDescription !== false;\r\n\r\n    useEffect(() => {\r\n        let id = field.value;\r\n        handleClick(id);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [field.value])\r\n\r\n    async function getDesciptionValues(id: number) {\r\n\r\n        if (id) {\r\n            let respose = await props.fetchMethod(id);\r\n            if (respose.data) {\r\n                setDescription(respose.data[keyDescription]);\r\n\r\n                if (props.objectName) {\r\n                    helpersObject.setValue(respose.data)\r\n                }\r\n            } else {\r\n                setDescription(\"\");\r\n            }\r\n        } else {\r\n            setDescription(\"\")\r\n        }\r\n    }\r\n\r\n    function setState(params: any) {\r\n        let id = params[keyId];\r\n        helpers.setValue(id);\r\n    }\r\n\r\n    const handleClick = useDebouncedCallback(async (id) => {\r\n        try {\r\n            setSubmitting(true)\r\n            await getDesciptionValues(id);\r\n\r\n        } finally {\r\n            setSubmitting(false)\r\n        }\r\n    }, 500);\r\n\r\n    function onChangeId(value: number | undefined) {\r\n        helpers.setValue(value);\r\n        helpers.setTouched(true);\r\n    }\r\n\r\n    function onBlurId() {\r\n        helpers.setTouched(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form.Item\r\n                className=\"select-model-one-style-item\"\r\n                validateStatus={meta.error && meta.touched ? \"error\" : \"validating\"}\r\n                help={meta.error && meta.touched ? meta.error : \"\"}>\r\n                <Row>\r\n                    <Col span={(props.col?.inputId) ?? (showDescription ? 8 : 19)} >\r\n                        <ItemFormRender showLabel={showLabel} label={props.label.label} required={required}>\r\n                            <InputNumber min={0} value={meta.value} onChange={onChangeId} onBlur={onBlurId} style={{ width: \"inherit\" }} />\r\n                        </ItemFormRender>\r\n                    </Col>\r\n                    <Col span={(props.col?.btnSearch) ?? (showDescription ? 3 : 5)} style={{ textAlign: \"center\" }} >\r\n                        <WithItemNone showLabel={showLabel} padding={false} >\r\n                            <Button type=\"primary\" icon=\"search\" onClick={() => setVisible(true)} ></Button>\r\n                        </WithItemNone>\r\n                    </Col>\r\n                    {showDescription && <Col span={(props.col?.inputDescription) ?? 13} >\r\n                        <WithItemNone showLabel={showLabel}>\r\n                            <InputAntd value={description} />\r\n                        </WithItemNone>\r\n                    </Col>}\r\n                </Row>\r\n\r\n                <ModelForm\r\n                    required={props.required}\r\n                    visible={visible}\r\n                    formMode={FormMode.SelectOne}\r\n                    setVisible={setVisible}\r\n                    setState={setState}\r\n                    state={isNaN(field.value) ? [] : { [keyId]: Number(field.value) }}\r\n                    label={props.label}\r\n                    errorMessage={props.errorMessage}\r\n                    path={props.path} />\r\n            </Form.Item>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default memo(SelectModelOne);\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter, Switch, withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\r\nimport { BasicLayoutContextProvider, FormMode } from '../../layouts/BasicLayout/BasicLayoutContext';\r\nimport RoutePath from './Components/RoutePath';\r\nimport { BreadcrumbProp } from '../../layouts/BasicLayout/BasicLayout';\r\n\r\nexport interface Props {\r\n    path?: string;\r\n    setState: (values: void) => void;\r\n    formMode : FormMode\r\n}\r\n\r\nconst RouterServiceModel: React.FC<RouteComponentProps & Props> = (props) => {\r\n\r\n    const [breadcrumb, setBreadcrumb] = useState<BreadcrumbProp[]>();\r\n    const [sharedState, setSharedState] = useState();\r\n    const [formMode, setFormMode] = useState<FormMode>(props.formMode)\r\n\r\n    return (\r\n        <BrowserRouter basename={props.history.location.pathname}  >\r\n            <Switch >\r\n                <BasicLayoutContextProvider value={{\r\n                    breadcrumb, setBreadcrumb,\r\n                    formMode, setFormMode,\r\n                    sharedState, setSharedState,\r\n                }}>\r\n\r\n                    <RoutePath />\r\n\r\n                    <Redirect to={{ pathname: \"/\" + (props.path || \"\") }} ></Redirect>\r\n                </BasicLayoutContextProvider>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default withRouter(RouterServiceModel);\r\n","import React, { useState, memo, useContext, useEffect } from 'react';\r\nimport { Modal, message } from 'antd';\r\nimport RouterServiceModel from '../../services/RouterService/RouterServiceModel';\r\nimport { ModalFormContextProvider } from './ModalFormContext';\r\nimport { withRouter, RouteComponentProps } from 'react-router';\r\nimport BasicLayoutContext, { FormMode } from '../../layouts/BasicLayout/BasicLayoutContext';\r\n\r\nexport interface ErrorMessage {\r\n    noSelection: string;\r\n}\r\n\r\nexport interface Label {\r\n    title: string;\r\n    label: string;\r\n}\r\n\r\nexport interface Props<T> {\r\n    visible: boolean;\r\n    setVisible: (values: boolean) => void;\r\n    setState: (values: T | T[]) => void;\r\n    state: T | T[];\r\n    path: string;\r\n    errorMessage: ErrorMessage;\r\n    label: Label;\r\n    required?: boolean;\r\n    formMode: FormMode\r\n}\r\n/**\r\n *\r\n *\r\n * @param {*} props\r\n * @returns\r\n */\r\nconst ModelForm: React.FC<Props<any> & RouteComponentProps> = (props) => {\r\n\r\n\r\n\r\n    const [state, setState] = useState<any[]>();\r\n\r\n    function CloseForm() {\r\n        props.setVisible(!props.visible);\r\n        props.history.push(props.location.pathname)\r\n\r\n    }\r\n\r\n    function handleCancel() {\r\n        CloseForm();\r\n    }\r\n\r\n    function handleOk() {\r\n\r\n\r\n        if (props.required && (state === undefined || (Array.isArray(state) && state.length === 0))) {\r\n            message.error(props.errorMessage.noSelection);\r\n            return;\r\n        }\r\n\r\n        if (props.formMode === FormMode.SelectMultiple) {\r\n            props.setState(state);\r\n        } else {\r\n            if (state != null && state.length > 0) {\r\n                props.setState(state[0]);\r\n            }\r\n        }\r\n\r\n        CloseForm()\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState([].concat(props.state))\r\n    }, [props.state])\r\n\r\n    return (\r\n        <ModalFormContextProvider value={{ setState, state }}>\r\n\r\n            <Modal\r\n                width=\"90%\"\r\n                title={props.label.title}\r\n                visible={props.visible}\r\n                destroyOnClose={true}\r\n                onOk={handleOk}\r\n                okText=\"Selecionar\"\r\n                onCancel={handleCancel}>\r\n                <RouterServiceModel path={props.path} setState={props.setState} formMode={props.formMode} />\r\n\r\n            </Modal>\r\n\r\n        </ModalFormContextProvider >\r\n    );\r\n\r\n}\r\n\r\nexport default withRouter(memo(ModelForm));\r\n","import { Cidade } from '../../models/Cidades/Cidade';\r\nimport { ApiBase } from '../Api';\r\n\r\nexport const endPoint: string = 'api/Cidade';\r\n\r\nclass Api extends ApiBase<Cidade>{\r\n\r\n    constructor() {\r\n        super(endPoint);\r\n    }\r\n}\r\nexport const CidadeApi = new Api();","import { Estado } from '../../models/Cidades/Estado';\r\nimport { ApiBase } from '../Api';\r\n\r\nexport const endPoint: string = 'api/Estado';\r\n\r\nclass Api extends ApiBase<Estado>{\r\n\r\n    constructor() {\r\n        super(endPoint);\r\n    }\r\n}\r\nexport const EstadoApi = new Api();"],"sourceRoot":""}