{"version":3,"sources":["layout/HomeContext.tsx","components/camera/CameraFoto.jsx","view/createNewExpense/CreateNewExpenseStyle.tsx","view/createNewExpense/componets/GetImage.tsx","view/createNewExpense/CreateNewExpense.tsx","view/dashBoard/DashBoard.tsx","layout/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EmailContext","createContext","Function","CameraFoto","props","useContext","data","useState","load","setLoad","map","email","subject","style","paddingBottom","paddingTop","position","width","textAlign","CircularProgress","fontSize","left","top","onTakePhoto","dataUri","onCameraError","error","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","imageCompression","isImageMirror","isSilentMode","isDisplayStartCameraError","isFullscreen","sizeFactor","onCameraStart","stream","setTimeout","onCameraStop","ImageConteiner","styled","figure","Image","img","FigCaptionLegend","figcaption","GetImage","cameraVisible","setCameraVisible","uriImage","setUriImage","className","transform","transformOrigin","src","Cached","color","onClick","CreateNewExpense","validationSchema","Yup","required","initialValues","firstName","onSubmit","alert","render","Grid","container","direction","justify","alignItems","item","xs","name","label","type","component","TextField","margin","fullWidth","DashBoard","setState","spacing","lg","Card","CardHeader","red","A700","title","subheader","CardContent","pink","CardActions","Button","size","marginLeft","purple","blue","newState","concat","console","log","Home","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ready","swRegistration","sync","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker","events","Notification","requestPermission","result","showNotification","body","icon","vibrate","tag"],"mappings":"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","file":"static/js/main.1d477676.chunk.js","sourcesContent":["import React, { Context, Dispatch, FunctionComponent, SetStateAction, createContext, useContext, useState } from 'react';\r\n\r\n// https://mitchellsimoens.com/2019/08/01/react-state-provider-hook/\r\nexport interface Email {\r\n  // more fields...\r\n  subject: string;\r\n}\r\n\r\nexport interface State {\r\n  data?: Email[];\r\n}\r\n\r\nexport type ContextArray = [State, Dispatch<SetStateAction<State>>];\r\n\r\nexport const EmailContext: Context<any> = createContext([{}, Function]);\r\n\r\ninterface Props {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst EmailProvider: FunctionComponent<Props> = ({ children }) => {\r\n  const [state, setState] = useState<State>({})\r\n\r\n  return <EmailContext.Provider value={[state, setState]} >\r\n    {children}\r\n  </EmailContext.Provider>\r\n};\r\n\r\nexport default EmailProvider;\r\n\r\n","import React from 'react';\r\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport { useState, useContext } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { setTimeout } from 'timers';\r\nimport { EmailContext, ContextArray, Email } from './../../layout/HomeContext.tsx';\r\n\r\n//https://www.npmjs.com/package/react-html5-camera-photo\r\n// export class CameraFoto extends Component {\r\nexport const CameraFoto = (props) => {\r\n\r\n  const [{ data }, setState] = useContext(EmailContext);\r\n\r\n  const [load, setLoad] = useState(true)\r\n\r\n  function onTakePhoto(dataUri) {\r\n    setLoad(true);\r\n\r\n    if (props.onTakePhoto) {\r\n      props.onTakePhoto(dataUri);\r\n    }\r\n  }\r\n\r\n  function onCameraError(error) {\r\n    setLoad(false);\r\n  }\r\n\r\n  function onCameraStart() {\r\n\r\n    setTimeout(() => {\r\n      setLoad(false);\r\n    }, 300);\r\n\r\n  }\r\n\r\n  function onCameraStop() {\r\n    setLoad(true);\r\n  }\r\n\r\n\r\n  function renderLoadCamera() {\r\n    return (\r\n      load ?\r\n        <div style={{ paddingBottom: \"300px\" }}>\r\n          <div style={{ paddingTop: \"200px\", position: \"absolute\", width: \"100%\", textAlign: \"center\" }}>\r\n\r\n            <CircularProgress style={{ fontSize: \"24px\" }} />\r\n            <p style={{ fontSize: \"24px\" }} >AGUARDE!!</p>\r\n\r\n          </div>\r\n        </div>\r\n        : null\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n      {data && data.map((email) => (\r\n        <div>{email.subject}</div>\r\n      ))}\r\n\r\n      {/* position: static|absolute|fixed|relative|sticky|initial|inherit; */}\r\n      {renderLoadCamera()}\r\n      <div style={{ position: \"fixed\", left: \"0px\", top: \"0\" }}>\r\n        <Camera\r\n          onTakePhoto={onTakePhoto}\r\n          onCameraError={onCameraError}\r\n          idealFacingMode={FACING_MODES.ENVIRONMENT}\r\n          // idealResolution = {{height: 1080, width: 1920 }}\r\n          imageType={IMAGE_TYPES.JPG}\r\n          imageCompression={1}\r\n          // isMaxResolution={false}\r\n          isImageMirror={false}\r\n          isSilentMode={true}\r\n          isDisplayStartCameraError={true}\r\n          isFullscreen={true}\r\n          sizeFactor={1}\r\n          onCameraStart={(stream) => { onCameraStart(); }}\r\n          onCameraStop={() => { onCameraStop(); }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default CameraFoto;","import styled from \"styled-components\";\r\n\r\nexport const ImageConteiner = styled.figure`\r\n    position: relative;\r\n    margin: 0;\r\n`\r\n\r\nexport const Image = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 1px solid;\r\n`\r\n\r\nexport const FigCaptionLegend = styled.figcaption`\r\n    position: absolute;\r\n    top: 90%;\r\n    left: 50%;\r\n    transform: translate(-50%,-50%);\r\n`","import React, { useState } from \"react\";\r\nimport CameraFoto from \"../../../components/camera/CameraFoto\";\r\nimport { ImageConteiner, FigCaptionLegend, Image } from \"../CreateNewExpenseStyle\";\r\nimport { Cached } from '@material-ui/icons';\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport const GetImage: React.SFC<{}> = () => {\r\n\r\n    const [cameraVisible, setCameraVisible] = useState<boolean>(true)\r\n    const [uriImage, setUriImage] = useState<string>(\"\");\r\n\r\n    function onTakePhoto(dataUri: string) {\r\n        setCameraVisible(false);\r\n        setUriImage(dataUri);\r\n    }\r\n\r\n    // style={{width:\"52px\", height:\"52px\" }} viewBox=\"0 0 24 24\" onClick={() => alert(\"Oi\")}\r\n    // <path fill=\"#000000\" d=\"M2 12C2 16.97 6.03 21 11 21C13.39 21 15.68 20.06 17.4 18.4L15.9 16.9C14.63 18.25 12.86 19 11 19C4.76 19 1.64 11.46 6.05 7.05C10.46 2.64 18 5.77 18 12H15L19 16H19.1L23 12H20C20 7.03 15.97 3 11 3C6.03 3 2 7.03 2 12Z\" />\r\n    function renderImageOptions() {\r\n        return (\r\n            <Cached color=\"error\" style={{ fontSize: \"50px\" }} onClick={() => setCameraVisible(true)} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        cameraVisible ?\r\n            <CameraFoto onTakePhoto={onTakePhoto} />\r\n            :\r\n            <ImageConteiner>\r\n                <label className=\"MuiFormLabel-root MuiInputLabel-root \" style={{\r\n                    transform: \"translate(0, 1.5px) scale(0.75)\",\r\n                    transformOrigin: \"top left\",\r\n                }} >Nota</label>\r\n                <Image src={uriImage} ></Image>\r\n                <FigCaptionLegend >\r\n                    {renderImageOptions()}\r\n                </FigCaptionLegend >\r\n\r\n            </ImageConteiner>\r\n    );\r\n}\r\n\r\nexport default GetImage;","import React from \"react\";\r\nimport GetImage from \"./componets/GetImage\";\r\nimport { Field, Formik, FormikProps, Form } from \"formik\";\r\nimport * as Yup from \"yup\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport const CreateNewExpense: React.SFC<{}> = () => {\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .required(\"Name is required, sqn\")\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ firstName: '' }}\r\n            onSubmit={() => alert(\"oi\")}\r\n\r\n            validationSchema={validationSchema}\r\n\r\n            render={() => (\r\n                <Form>\r\n                    <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"stretch\">\r\n\r\n                        <Grid item xs={12}>\r\n\r\n                            <GetImage />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                name=\"valorTotal\"\r\n                                label=\"Valor Total\"\r\n                                type=\"text\"\r\n                                component={TextField}\r\n                                margin=\"normal\"\r\n                                fullWidth />\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </Form>\r\n            )} />\r\n    );\r\n}\r\n\r\nexport default CreateNewExpense;","import { Grid, Card, CardContent, Typography, CardActions, Button, CardHeader, IconButton, Input } from \"@material-ui/core\";\r\nimport { red, purple, pink, blue } from '@material-ui/core/colors';\r\nimport React, { useContext } from \"react\";\r\nimport CameraFoto from \"../../components/camera/CameraFoto\";\r\nimport { EmailContext, ContextArray, Email } from '../../layout/HomeContext';\r\n\r\nexport const DashBoard: React.SFC<{}> = () => {\r\n\r\n    const [{ data }, setState]: ContextArray = useContext(EmailContext);\r\n\r\n    function addTeste() {\r\n        const newState: Email[] = (data || []).concat({ subject: \"Yesye\" });\r\n        console.log(newState);\r\n        setState({ data: newState });\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n\r\n            <Grid item xs={12} lg={4}>\r\n                <Card  >\r\n                    <CardHeader style={{ color: red.A700 }}\r\n                        title=\"Gasto Total do Mês\"\r\n                        subheader=\"30/01/3019\"\r\n                    />\r\n\r\n                    <CardContent>\r\n                        <span style={{ fontSize: \"30px\", color: pink[900] }}  >R$ 500,00</span>\r\n                    </CardContent>\r\n\r\n                    <CardActions >\r\n                        <Button size=\"medium\" style={{ marginLeft: \"auto\", color: purple[400] }}>Visualizar</Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} lg={4}>\r\n                <Card  >\r\n                    <CardHeader style={{ color: blue.A700 }}\r\n                        title=\"Meus Gastos do Mês\"\r\n                        subheader=\"30/01/3019\"\r\n                    />\r\n\r\n                    <CardContent>\r\n                        <span style={{ fontSize: \"30px\", color: pink[500] }}  >R$ 500,00</span>\r\n                    </CardContent>\r\n\r\n                    <CardActions >\r\n                        <Button size=\"medium\" style={{ marginLeft: \"auto\", color: purple[400] }}>Visualizar</Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Grid><Grid item xs={12} lg={4}>\r\n                <Card  >\r\n                    <CardHeader style={{ color: red.A700 }}\r\n                        title=\"Gasto Total do Mês\"\r\n                        subheader=\"30/01/3019\"\r\n                    />\r\n\r\n                    <CardContent>\r\n                        <span style={{ fontSize: \"30px\", color: pink[900] }}  >R$ 500,00</span>\r\n                    </CardContent>\r\n\r\n                    <CardActions >\r\n                        <Button size=\"medium\" style={{ marginLeft: \"auto\", color: purple[400] }}>Visualizar</Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} lg={4}>\r\n                <Card  >\r\n                    <CardHeader style={{ color: blue.A700 }}\r\n                        title=\"Meus Gastos do Mês\"\r\n                        subheader=\"30/01/3019\"\r\n                    />\r\n\r\n                    <CardContent>\r\n                        <span style={{ fontSize: \"30px\", color: pink[500] }}  >R$ 500,00</span>\r\n                    </CardContent>\r\n\r\n                    <CardActions >\r\n                        <Button size=\"medium\" style={{ marginLeft: \"auto\", color: purple[400] }}>Visualizar</Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Button onClick={addTeste}>Teste</Button>\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DashBoard;","import * as React from 'react';\r\nimport CreateNewExpense from '../view/createNewExpense/CreateNewExpense';\r\nimport { Sidebar } from '../components/sidebar/Sidebar';\r\nimport DashBoard from '../view/dashBoard/DashBoard';\r\n\r\n\r\nexport const Home: React.SFC<{}> = () => {\r\n\r\n    return (\r\n        <>\r\n            {/* <Sidebar > */}\r\n\r\n            <CreateNewExpense />\r\n\r\n            {/* </Sidebar> */}\r\n\r\n            <DashBoard></DashBoard>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport { Icon, Button } from '@material-ui/core';\nimport { MyApp } from './MyApp';\nimport { Home } from './layout/Home';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      \n      <body>\n        <Home></Home>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n    window.addEventListener('sync', function(events) {\n      Notification.requestPermission(function (result) {\n                if (result === 'granted') {\n                    navigator.serviceWorker.ready.then(function (registration) {\n                        registration.showNotification('Vibration Sample', {\n                            body: 'Buzz! Buzz! Ofline',\n                            icon: '../images/touch/chrome-touch-icon-192x192.png',\n                            vibrate: [200, 100, 200, 100, 200, 100, 200],\n                            tag: 'vibration-sample'\n                        });\n                    });\n                }\n            });\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  console.log(\"Iniciando SW\")\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n\n      // setInterval(() => {\n      //   if (Notification.permission == 'granted') {\n      //     navigator.serviceWorker.getRegistration().then(function (registration1) {\n      //       var options = {\n      //         body: 'Here is a notification body!',\n      //         icon: 'images/example.png',\n      //         vibrate: [100, 50, 100],\n      //         data: {\n      //           dateOfArrival: Date.now(),\n      //           primaryKey: 1\n      //         }\n      //       };\n      //       if (registration1) {\n      //         registration1.showNotification('Hello world!', options);\n      //       }\n      //     });\n      //   }\n\n      // }, 5000);\n\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n\n    })\n\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n\n  // Then later, request a one-off sync:\n  navigator.serviceWorker.ready.then(function (swRegistration) {\n    console.log(\"Registrado\")\n    return swRegistration.sync.register('myFirstSync');\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n\n\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\n// Notification.requestPermission().then(function (result) {\n//     console.log(result);\n// });\n\n\n// Notification.s\n\n// function notifyMe() {\n//     var i = 0;\n//     // Using an interval cause some browsers (including Firefox) are blocking notifications if there are too much in a certain time.\n//     var interval = window.setInterval(function () {\n//       // Thanks to the tag, we should only see the \"Hi! 9\" notification \n//       var n = new Notification(\"Hi! \" + i, {tag: 'soManyNotification'});\n//       if (i++ == 9) {\n//         window.clearInterval(interval);\n//       }\n//     }, 200);\n// }\n\n// notifyMe();\n\nserviceWorker.register();\n\nNotification.requestPermission(function (status) {\n    console.log('Notification permission status:', status);\n});\n\n// function showNotification() {\n//     Notification.requestPermission(function (result) {\n//         if (result === 'granted') {\n//             navigator.serviceWorker.ready.then(function (registration) {\n//                 registration.showNotification('Vibration Sample', {\n//                     body: 'Buzz! Buzz!',\n//                     icon: '../images/touch/chrome-touch-icon-192x192.png',\n//                     vibrate: [200, 100, 200, 100, 200, 100, 200],\n//                     tag: 'vibration-sample'\n//                 });\n//             });\n//         }\n//     });\n// }\n\n// setTimeout(() => {\n//     if (Notification.permission == 'granted') {\n//       navigator.serviceWorker.getRegistration().then(function (registration1) {\n//         var options = {\n//           body: 'Here is a notification body!',\n//           icon: 'images/example.png',\n//           vibrate: [100, 50, 100],\n//           data: {\n//             dateOfArrival: Date.now(),\n//             primaryKey: 1\n//           }\n//         };\n//         if (registration1) {\n//           registration1.showNotification('Hello world!', options);\n//         }\n//       });\n//     }\n\n//   }, 5000);\n\n// showNotification();"],"sourceRoot":""}