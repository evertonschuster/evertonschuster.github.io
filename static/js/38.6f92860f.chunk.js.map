{"version":3,"sources":["pages/Movimentos/Servicos/FormServico/ServicoSchema.ts","pages/Movimentos/Servicos/FormServico/FormServico.tsx","apis/Movimentos/CategoriaApi.ts"],"names":["ServicoSchema","Yup","shape","id","nome","max","required","valor","categoriaId","min","FormServico","props","useState","undefined","servico","loading","setLoading","a","useEffect","getServico","match","params","CrudFormLayout","isLoading","backPath","breadcrumbList","displayName","URL","initialValues","validationSchema","onSubmit","span","name","label","placeholder","readOnly","SelectModelOne","fetchMethod","CategoriaApi","GetById","bind","keyDescription","title","errorMessage","noSelection","path","rows","SelectModelMoreWithTable","FuncaoFuncionarioApi","columns","dataIndex","ApiBase"],"mappings":"yPAIaA,EAAgBC,WAAaC,MAAe,CACrDC,GAAIF,WAEJG,KAAMH,WACDI,IAAI,GAAI,6DACRC,SAAS,+CAEdC,MAAON,WAAaK,SAAS,kCAE7BE,YAAaP,WACRK,SAAS,wCACTG,IAAI,EAAG,0C,2CC2GDC,UA3G+D,SAACC,GAAW,IAAD,EACnEC,mBAAkB,CAChCR,KAAM,GACNG,WAAOM,EACPL,iBAAaK,IAHVC,EAD8E,sBAMvDF,oBAAS,GAN8C,mBAM9EG,EAN8E,KAMrEC,EANqE,iDA6BrF,sBAAAC,EAAA,2FA7BqF,kEAiCrF,sBAAAA,EAAA,sDAOQD,GAAW,GAPnB,4CAjCqF,sBA4CrF,OArBAE,qBAAU,YAvB2E,mCAwBjFC,KACD,CAACR,EAAMS,MAAMC,OAAOlB,KAoBnB,kBAACmB,EAAA,EAAD,CACIC,UAAWR,EACXS,SAAS,WACTC,eAAgB,CAAC,CAAEC,YAAa,cAAYC,IAAK,YAAc,CAAED,YAAa,kBAAgBC,SAAKd,IACnGe,cAAed,EACfe,iBAAkB7B,EAClB8B,SAnD6E,4CAsD7E,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,KAAM,GACP,kBAAC,IAAD,CAAOC,KAAK,KAAKC,MAAM,YAASC,YAAY,SAASC,UAAQ,KAGjE,kBAAC,IAAD,CAAKJ,KAAM,GACP,kBAAC,IAAD,CAAOC,KAAK,OAAOC,MAAM,aAAUC,YAAY,aAAU5B,UAAQ,KAGrE,kBAAC,IAAD,CAAKyB,KAAM,GACP,kBAAC,IAAD,CAAaC,KAAK,QAAQC,MAAM,QAAQ3B,UAAQ,KAGpD,kBAAC,IAAD,CAAKyB,KAAM,GACP,kBAACK,EAAA,EAAD,CACIC,YAAaC,IAAaC,QAAQC,KAAKF,KACvCN,KAAK,cACLS,eAAe,OACfnC,UAAU,EACV2B,MAAO,CAAES,MAAO,6BAAwBT,MAAO,aAC/CU,aAAc,CAAEC,YAAa,sCAC7BC,KAAK,gBAKjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKd,KAAM,IACP,kBAAC,IAAD,CAAUC,KAAK,YAAYC,MAAM,kBAAYa,KAAM,KAGvD,kBAAC,IAAD,CAAKf,KAAM,IACP,kBAAC,IAAD,CAAUC,KAAK,YAAYC,MAAM,mBAAaa,KAAM,MAI5D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKf,KAAM,IACP,kBAACgB,EAAA,EAAD,CACIV,YAAaW,IAAqBT,QAAQC,KAAKQ,KAC/Cf,MAAO,CAAEA,MAAO,kBAAgBS,MAAO,+BACvCV,KAAK,iBACLiB,QAzFgB,CAChC,CACIP,MAAO,iBACPQ,UAAW,QAEf,CACIR,MAAO,QACPQ,UAAW,SAEf,CACIR,MAAO,eACPQ,UAAW,2BA+ECP,aAAc,CAAEC,YAAa,wCAC7BC,KAAK,qB,mHC9GtB,IAQMP,EAAe,I,keAJxB,aAAe,uCAJa,iB,UAEda","file":"static/js/38.6f92860f.chunk.js","sourcesContent":["import * as Yup from 'yup';\r\nimport { Servico } from '../../../../models/Movimentos/Servico';\r\n\r\n\r\nexport const ServicoSchema = Yup.object().shape<Servico>({\r\n    id: Yup.number(),\r\n\r\n    nome: Yup.string()\r\n        .max(50, \"O campo [Nome] não deve possuir mais de 50 caracteres.\")\r\n        .required('[Nome] do Serviço não pode ser vaziu.'),\r\n\r\n    valor: Yup.number().required(\"Informe o valor do serviço.\"),\r\n\r\n    categoriaId: Yup.number()\r\n        .required(\"Informe uma Categoria ao serviço.\")\r\n        .min(0, \"Informe uma Categoria ao serviço.\"),\r\n\r\n});\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Servico } from '../../../../models/Movimentos/Servico';\r\nimport CrudFormLayout from '../../../../layouts/CrudFormLayout/CrudFormLayout';\r\nimport { Row, Col } from 'antd';\r\nimport { Input, InputNumber } from '../../../../components/WithFormItem/withFormItem';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { ServicoSchema } from './ServicoSchema';\r\nimport { TextArea } from './../../../../components/WithFormItem/withFormItem';\r\nimport SelectModelOne from '../../../../components/SelectModel/SelectModelOne';\r\nimport SelectModelMoreWithTable from '../../../../components/SelectModel/SelectModelMoreWithTable';\r\nimport { ColumnProps } from 'antd/lib/table';\r\nimport { CategoriaApi } from '../../../../apis/Movimentos/CategoriaApi';\r\nimport { FuncaoFuncionarioApi } from '../../../../apis/Pessoas/FuncaoFuncionarioApi';\r\nimport { errorBack } from '../../../../utils/MessageApi';\r\n\r\nconst FormServico: React.FC<RouteComponentProps & RouteComponentProps<any>> = (props) => {\r\n    const [servico] = useState<Servico>({\r\n        nome: \"\",\r\n        valor: undefined,\r\n        categoriaId: undefined,\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const columns: ColumnProps<any>[] = [\r\n        {\r\n            title: 'Funcionário',\r\n            dataIndex: 'nome',\r\n        },\r\n        {\r\n            title: 'Idade',\r\n            dataIndex: 'idade',\r\n        },\r\n        {\r\n            title: 'Função',\r\n            dataIndex: 'funcaoFuncionario.nome',\r\n        },\r\n    ];\r\n\r\n\r\n    useEffect(() => {\r\n        getServico();\r\n    }, [props.match.params.id])\r\n\r\n\r\n    \r\n    async function onSubmit() {\r\n\r\n    }\r\n\r\n    async function getServico() {\r\n        try {\r\n\r\n\r\n        } catch (e) {\r\n            errorBack(null, e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CrudFormLayout\r\n            isLoading={loading}\r\n            backPath=\"/servico\"\r\n            breadcrumbList={[{ displayName: \"Serviços\", URL: \"/servico\" }, { displayName: \"Novo Serviço\", URL: undefined }]}\r\n            initialValues={servico}\r\n            validationSchema={ServicoSchema}\r\n            onSubmit={onSubmit}\r\n        >\r\n\r\n            <Row>\r\n                <Col span={2}>\r\n                    <Input name=\"id\" label=\"Código\" placeholder=\"Codigo\" readOnly />\r\n                </Col>\r\n\r\n                <Col span={6}>\r\n                    <Input name=\"nome\" label=\"Serviço\" placeholder=\"Serviço\" required />\r\n                </Col>\r\n\r\n                <Col span={4}>\r\n                    <InputNumber name=\"valor\" label=\"Valor\" required />\r\n                </Col>\r\n\r\n                <Col span={8}>\r\n                    <SelectModelOne\r\n                        fetchMethod={CategoriaApi.GetById.bind(CategoriaApi)}\r\n                        name=\"categoriaId\"\r\n                        keyDescription=\"nome\"\r\n                        required={true}\r\n                        label={{ title: \"Seleção de Categoria\", label: \"Categoria\" }}\r\n                        errorMessage={{ noSelection: \"Selecione ao menos uma Categoriaa!\" }}\r\n                        path=\"categoria\" />\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n            <Row>\r\n                <Col span={12}>\r\n                    <TextArea name=\"descricao\" label=\"Descrição\" rows={3} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                    <TextArea name=\"oservacao\" label=\"Observação\" rows={3} />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col span={24}>\r\n                    <SelectModelMoreWithTable\r\n                        fetchMethod={FuncaoFuncionarioApi.GetById.bind(FuncaoFuncionarioApi)}\r\n                        label={{ label: \"Funcionários\", title: \"Selecione um Funcionário\" }}\r\n                        name=\"funcionarioIds\"\r\n                        columns={columns}\r\n                        errorMessage={{ noSelection: \"Selecione ao menos um funcionário\" }}\r\n                        path=\"funcionario\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </CrudFormLayout>)\r\n}\r\n\r\nexport default FormServico\r\n","import { Categoria } from '../../models/Movimentos/Categoria';\r\nimport { ApiBase } from '../Api';\r\n\r\nexport const endPoint: string = 'api/categoria';\r\n\r\nclass Api extends ApiBase<Categoria>{\r\n\r\n    constructor() {\r\n        super(endPoint);\r\n    }\r\n}\r\nexport const CategoriaApi = new Api();"],"sourceRoot":""}